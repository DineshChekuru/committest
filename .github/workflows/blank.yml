# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "dinesh" ]
 # pull_request:
 #   branches: [ "dinesh" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: Copying files from Dev to Prod directory...
        shell: pwsh
        run: | 
            $commitid = "0b75cfa2838dfe97776823207d824c897d9a0ca3"

            $log_files = New-Object -TypeName "System.Collections.ArrayList"
            $log_files = git log --pretty=oneline
            
            foreach($commit in $log_files) 
            {
            $commit = $commit.split(" ")
            if($commit -match $commitid)
            {
            Write-Host "File Modified " $commit[2]
            
            $filename = $commit[2]
            
            Get-ChildItem -Recurse | Resolve-Path -Relative
            Write-Host "Getting hash of prod directory before copy"
            Get-FileHash -InputStream ([IO.MemoryStream]::new([char[]]"$(Get-ChildItem .\prod -Recurse|Out-String)"))
            Write-Host "copying files..."
            
            $filecheck = Get-ChildItem -Path ".\prod\$filename"
            if(!$filecheck)
            {
            New-Item -Path ".\prod\$filename"
            }
            Copy-Item -Path ".\dev\$filename" -destination ".\prod\$filename" -Recurse -Force
            Write-Host "Getting hash of prod directory after copy"
            Get-FileHash -InputStream ([IO.MemoryStream]::new([char[]]"$(Get-ChildItem .\prod -Recurse|Out-String)"))
            Write-Output "File copy process completed."
            Get-ChildItem -Recurse  | Resolve-Path -Relative
            
            }
            }
        
      - name: Debug Step 1
        run: echo "Debugging Step 1"

      - name: Setup Git for Windows' minimal SDK
        uses: git-for-windows/setup-git-for-windows-sdk@v1

      - name: Debug Step 2
        run: echo "Debugging Step 2"

      - uses: EndBug/add-and-commit@v9
        with:
          message: '[skip actions] Auto commit to version prod artifacts'
          committer_name: 'GitHub Actions'
          committer_email: 'actions@github.com'
          push: true
